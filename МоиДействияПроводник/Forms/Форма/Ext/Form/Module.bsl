&НаКлиенте
Перем НайденныеКаталогиМассив, НайденныеФайлыМассив, НайденныеКаталогиИФайлы, ПолучаемыеСвойства, ДополнительныеПараметры, НайденныеКаталоги;

&НаСервереБезКонтекста
Процедура НайтиФайлыКомандаНаСервере()
	//ЗначениеИзСтрокиВнутр(Объект.Модуль).НайтиФайлыМД();
КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыКоманда(Команда)
	
	НайтиФайлыМД();
	//НайтиФайлыКомандаНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыМД() Экспорт
	
	Объект.Файлы.Очистить();
	Объект.Каталоги.ПолучитьЭлементы().Очистить();
	Сообщить("" + ТекущаяДата() + " Начало поиска");
	
	ПолучаемыеСвойства	= "";  
	Для Каждого Элемент Из Объект.Свойства Цикл
		Если Элемент.Пометка Тогда
			ПолучаемыеСвойства	= ПолучаемыеСвойства + Элемент.Значение + ",";
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Маска.Количество() = 0 Тогда
		Объект.Маска.Добавить("*.*");
	КонецЕсли;
	
	Для Каждого Маска Из Объект.Маска Цикл
		ОписаниеОповещения	= Новый ОписаниеОповещения("НачатьПоискФайловЗавершение", ЭтотОбъект, ПолучаемыеСвойства);
		НачатьПоискФайлов(ОписаниеОповещения, Объект.Путь, Маска, Объект.ИскатьВПодкаталогах);
		//??? {МоиДействия Обработка.МоиДействияПроводник.Форма.Форма.Форма(21)}: Ошибка при вызове метода контекста (ЗначениеЗаполнено)
		//		Если НЕ ЗначениеЗаполнено(Маска) Тогда
		//по причине:
		//Проверка мутабельных значений на заполненность не поддерживается
		//Если НЕ ЗначениеЗаполнено(Маска) Тогда
		//	Маска	= "*.*";
		//КонецЕсли;
		//НайтиФайлыПоМаске(Маска);
		//НачатьПоискФайловПоМаске(Маска);
	КонецЦикла;
	//ФайлыСортировать(); // ??? Не работает
КонецПроцедуры

&НаСервере
Процедура ФайлыСортировать()
	Объект.Файлы.Сортировать("ЭтоКаталог Убыв, Имя");
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискФайловЗавершение(Файлы, ДополнительныеПараметры) Экспорт
	
	НайденныеКаталогиМассив = Новый Массив;
	НайденныеФайлыМассив 	= Новый Массив;
	НайденныеКаталогиИФайлы	= Файлы;
	
	Сообщить("" + ТекущаяДата() + "	Найдено каталогов и файлов: " + Файлы.Количество());
	Для Каждого Файл Из Файлы Цикл
		
		//Структура	= Новый Структура("Каталоги, Файлы, Файл, ПолноеИмя", НайденныеКаталогиМассив, НайденныеФайлыМассив, Файл, Файл.ПолноеИмя);
		Структура	= Новый Структура("Файл", Файл);
		ОписаниеОповещения	= Новый ОписаниеОповещения("НачатьПроверкуЭтоКаталогЗавершение", ЭтотОбъект, Структура);
		//ОписаниеОповещения.ДополнительныеПараметры.Вставить("Каталоги", НайденныеКаталогиМассив); 
		//ОписаниеОповещения.ДополнительныеПараметры.Вставить("Файлы", НайденныеФайлыМассив); 
		//ОписаниеОповещения.ДополнительныеПараметры.Вставить("Файл", Файл); 
		//ОписаниеОповещения.ДополнительныеПараметры.Вставить("ПолноеИмя", Файл.ПолноеИмя); 
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
		
	КонецЦикла;
	Сообщить("" + ТекущаяДата() + "	Завершен обход найденных");
	
	
	ПодключитьОбработчикОжидания("СортировкаНаКаталогиИФайлыЗавершена", 1, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаНаКаталогиИФайлыЗавершена()
	
	
	Если  НайденныеКаталогиМассив.Количество() + НайденныеФайлыМассив.Количество() = НайденныеКаталогиИФайлы.Количество() Тогда
		
		Сообщить("" + ТекущаяДата() + "		Каталогов	= " + НайденныеКаталогиМассив.Количество() + ", файлов = " + НайденныеФайлыМассив.Количество());
		ОтключитьОбработчикОжидания("СортировкаНаКаталогиИФайлыЗавершена");
		
			
		Путь	= Объект.Путь;
		Путь	= Путь + ?(Прав(Путь, 1) = ПолучитьРазделительПути(), "", ПолучитьРазделительПути());
		
		Строки	= Объект.Каталоги.ПолучитьЭлементы();
		Строка	= Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Новый Файл(Путь));
		Строка.Путь			= Строка.ПолноеИмя + ПолучитьРазделительПути();
		Строка.ЭтоКаталог	= Истина;
		
		НайденныеКаталоги	= Новый Соответствие;
		НайденныеКаталоги.Вставить(Путь, Строка.ПолучитьЭлементы());
		
		
		Для Каждого Файл Из НайденныеКаталогиМассив Цикл
			ЗаполнитьФайлыНаКлиентеДобавитьСтроку(Файл, НайденныеКаталоги, ПолучаемыеСвойства, Истина);
		КонецЦикла;
		Для Каждого Файл Из НайденныеФайлыМассив Цикл
			ЗаполнитьФайлыНаКлиентеДобавитьСтроку(Файл, НайденныеКаталоги, ПолучаемыеСвойства, Ложь);
		КонецЦикла;
		Элементы.Каталоги.Развернуть(Объект.Каталоги.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
			
		Сообщить("" + ТекущаяДата() + "		Обработка завершена");
		
	КонецЕсли;
	
КонецПроцедуры

	
&НаКлиенте
Функция ЗаполнитьФайлыНаКлиентеДобавитьСтроку(Файл, НайденныеКаталоги, ПолучаемыеСвойства, ЭтоКаталоги = Неопределено, РекурсивныйВызов	= Ложь)
	
	Если НЕ РекурсивныйВызов Тогда
		НоваяСтрокаТаблицы	= Объект.Файлы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Файл, ПолучаемыеСвойства);
		НоваяСтрокаТаблицы.ОтносительноеИмя	= СтрЗаменить(Файл.ПолноеИмя, ПутьСКонечнымРазделителем(Объект.Путь), "");
		Если НЕ ЭтоКаталоги = Неопределено Тогда
			НоваяСтрокаТаблицы.ЭтоКаталог	= ЭтоКаталоги;
			НоваяСтрокаТаблицы.ЭтоФайл		= НЕ ЭтоКаталоги;
		КонецЕсли;
	КонецЕсли;
	
	Строки	= 	НайденныеКаталоги[Файл.Путь];
	Если Строки = Неопределено Тогда
		Строка	= ЗаполнитьФайлыНаКлиентеДобавитьСтроку(Новый Файл(Файл.Путь), НайденныеКаталоги, ПолучаемыеСвойства, Истина, Истина);
		//НайденныеКаталоги.Вставить(Строка.Путь, Строка.ПолучитьЭлементы());
	Иначе
		Строка	= Строки.Добавить();
		Если РекурсивныйВызов Тогда
			ЗаполнитьЗначенияСвойств(Строка, Файл);
			Строка.ЭтоКаталог	= Истина;
			Строка.ЭтоФайл		= Ложь;
			Строка.ОтносительноеИмя	= СтрЗаменить(Файл.ПолноеИмя, ПутьСКонечнымРазделителем(Объект.Путь), "");
		Иначе
			ЗаполнитьЗначенияСвойств(Строка, НоваяСтрокаТаблицы);
		КонецЕсли;
		Если Строка.ЭтоКаталог Тогда
			НайденныеКаталоги.Вставить(ПутьСКонечнымРазделителем(Строка.ПолноеИмя), Строка.ПолучитьЭлементы());
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Метод Из Объект.Методы Цикл
		Если Метод.Пометка Тогда
			Если НЕ (Метод.Значение = "ЭтоКаталог" ИЛИ Метод.Значение = "ЭтоФайл") Тогда
				Если РекурсивныйВызов Тогда
					Метод(Файл, Метод.Значение, Строка, Неопределено);
				Иначе
					Метод(Файл, Метод.Значение, Строка, НоваяСтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Строка;
	
КонецФункции


&НаКлиенте
Функция ПутьСКонечнымРазделителем(Путь) Экспорт
	
	Возврат Путь + ?(Прав(Путь, 1) = ПолучитьРазделительПути(), "", ПолучитьРазделительПути());

КонецФункции

&НаКлиенте
Процедура Метод(Файл, Метод, Приемник, Приемник2)
	
	Если Приемник2 = Неопределено Тогда
		Приемник2	= Приемник;
	КонецЕсли;
	
	Если Метод	= "Существует" Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("НачатьПроверкуСуществованияЗавершение", ЭтотОбъект, Новый Структура);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник", Приемник); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник2", Приемник2); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Свойство", Метод); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Файл", Файл); 
		Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	ИначеЕсли Метод	= "ЭтоКаталог" Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("НачатьПроверкуЭтоКаталогЗавершение", ЭтотОбъект, Новый Структура);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник", Приемник); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник2", Приемник2); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Свойство", Метод); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Файл", Файл); 
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	ИначеЕсли Метод	= "ЭтоФайл" Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("НачатьПроверкуЭтоФайлЗавершение", ЭтотОбъект, Новый Структура);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник", Приемник); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник2", Приемник2); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Свойство", Метод); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Файл", Файл); 
		Файл.НачатьПроверкуЭтоФайл(ОписаниеОповещения);
	ИначеЕсли Метод	= "Размер" Тогда
		Если Приемник.ЭтоФайл Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения("НачатьПолучениеРазмераЗавершение", ЭтотОбъект, Новый Структура);
			ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник", Приемник); 
			ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник2", Приемник2); 
			ОписаниеОповещения.ДополнительныеПараметры.Вставить("Свойство", Метод); 
			ОписаниеОповещения.ДополнительныеПараметры.Вставить("Файл", Файл); 
			Файл.НачатьПолучениеРазмера(ОписаниеОповещения);
		КонецЕсли;
	ИначеЕсли Метод	= "ВремяИзменения" Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("НачатьПолучениеВремениИзмененияЗавершение", ЭтотОбъект, Новый Структура);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник", Приемник); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник2", Приемник2); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Свойство", Метод); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Файл", Файл); 
		Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	ИначеЕсли Метод	= "УниверсальноеВремяИзменения" Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("НачатьПолучениеУниверсальногоВремениИзмененияЗавершение", ЭтотОбъект, Новый Структура);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник", Приемник); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник2", Приемник2); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Свойство", Метод); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Файл", Файл); 
		Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	ИначеЕсли Метод	= "ТолькоЧтение" Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("НачатьПолучениеТолькоЧтенияЗавершение", ЭтотОбъект, Новый Структура);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник", Приемник); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник2", Приемник2); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Свойство", Метод); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Файл", Файл); 
		Файл.НачатьПолучениеТолькоЧтения(ОписаниеОповещения);
	ИначеЕсли Метод	= "Невидимый" Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("НачатьПолучениеНевидимостиЗавершение", ЭтотОбъект, Новый Структура);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник", Приемник); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Приемник2", Приемник2); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Свойство", Метод); 
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Файл", Файл); 
		Файл.НачатьПолучениеНевидимости(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществованияЗавершение(Существует, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Приемник[ДополнительныеПараметры.Свойство]	= Существует;
	ДополнительныеПараметры.Приемник2[ДополнительныеПараметры.Свойство]	= Существует;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.Свойство("Приемник") Тогда
		ДополнительныеПараметры.Приемник[ДополнительныеПараметры.Свойство]	= ЭтоКаталог;
		ДополнительныеПараметры.Приемник2[ДополнительныеПараметры.Свойство]	= ЭтоКаталог;
	Иначе		
		Если ЭтоКаталог Тогда
			НайденныеКаталогиМассив.Добавить(ДополнительныеПараметры.Файл);
			//ДополнительныеПараметры.Каталоги.Добавить(ДополнительныеПараметры.Файл); 
		Иначе
			НайденныеФайлыМассив.Добавить(ДополнительныеПараметры.Файл);
			//ДополнительныеПараметры.Файлы.Добавить(ДополнительныеПараметры.Файл); 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуЭтоФайлЗавершение(ЭтоФайл, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Приемник[ДополнительныеПараметры.Свойство]	= ЭтоФайл;
	ДополнительныеПараметры.Приемник2[ДополнительныеПараметры.Свойство]	= ЭтоФайл;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеРазмераЗавершение(Размер, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Приемник[ДополнительныеПараметры.Свойство]	= Размер;
	ДополнительныеПараметры.Приемник2[ДополнительныеПараметры.Свойство]	= Размер;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеВремениИзмененияЗавершение(ВремяИзменения, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Приемник[ДополнительныеПараметры.Свойство]	= ВремяИзменения;
	ДополнительныеПараметры.Приемник2[ДополнительныеПараметры.Свойство]	= ВремяИзменения;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеУниверсальногоВремениИзмененияЗавершение(УниверсальноеВремяИзменения, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Приемник[ДополнительныеПараметры.Свойство]	= УниверсальноеВремяИзменения;
	ДополнительныеПараметры.Приемник2[ДополнительныеПараметры.Свойство]	= УниверсальноеВремяИзменения;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеТолькоЧтенияЗавершение(ТолькоЧтение, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Приемник[ДополнительныеПараметры.Свойство]	= ТолькоЧтение;
	ДополнительныеПараметры.Приемник2[ДополнительныеПараметры.Свойство]	= ТолькоЧтение;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеНевидимостиЗавершение(Невидимый, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Приемник[ДополнительныеПараметры.Свойство]	= Невидимый;
	ДополнительныеПараметры.Приемник2[ДополнительныеПараметры.Свойство]	= Невидимый;
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Маска.ТипЗначения 	= Новый ОписаниеТипов("Строка");
	Объект.Свойства.ТипЗначения = Новый ОписаниеТипов("Строка");
	Свойства	= Новый Структура("Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение",
								"Имя", "Имя без расширения", "Полное имя", "Путь", "Расширение");
	Для Каждого Свойство Из Свойства Цикл
		Объект.Свойства.Добавить(Свойство.Ключ, Свойство.Значение, Истина);
	КонецЦикла;
		
	Методы		= Новый Структура("Существует, ЭтоКаталог, ЭтоФайл, Размер, ВремяИзменения, УниверсальноеВремяИзменения, ТолькоЧтение, Невидимый",
	"Существует", "Это каталог", "Это файл", "Размер", "Время изменения", "УниверсальноеВремяИзменения", "Только чтение", "Невидимый"); //УниверсальноеВремяИзменения
	Для Каждого Метод Из Методы Цикл
		Объект.Методы.Добавить(Метод.Ключ, Метод.Значение, Ложь);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура Итоги(Команда)
	ПолучитьИтоги(Объект.Каталоги.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИтоги(Строки)
	Для Каждого Строка Из Строки Цикл
		Строка.Размер	=  СуммаСтрок(Строка, "Размер");
		//ПодчиненныеСтроки	= Строка.ПолучитьЭлементы();
		//Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		//	Если ПодчиненнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
		//		ПолучитьИтоги(ПодчиненнаяСтрока.ПолучитьЭлементы());
		//	КонецЕсли;
		//	Строка.Размер	= Строка.Размер + ПодчиненнаяСтрока.Размер;
		//КонецЦикла;
		//Строка.Размер	= Строка.Размер + ПодчиненнаяСтрока.Размер;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция СуммаСтрок(СтрокаДерева, Поле)
	
	Сумма = 0;
	Для Каждого ДочерняяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если ДочерняяСтрока.ПолучитьЭлементы().Количество()=0 Тогда
			Сумма = Сумма + ДочерняяСтрока[Поле];
		Иначе
			Сумма = Сумма + СуммаСтрок(ДочерняяСтрока, Поле);
		КонецЕсли;
	КонецЦикла;
	СтрокаДерева[Поле]	= Сумма;
	Возврат Сумма;
	
КонецФункции

&НаКлиенте
Процедура СохранитьПортрет(Команда)
	
	СохранитьПортретНаСервере();
	Возврат;
	//НовыйXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	//
	//ТекущаяДата	= ТекущаяДата();
	//Файл	= Новый Файл(Объект.Путь);
	//Путь = Файл.Путь;
	//Имя		= Файл.Имя + "_Portrait_FormDataCollection_" + Формат(ТекущаяДата, "ДФ=yyyy-MM-dd_HH-mm-ss") + ".xml";
	//Запись = Новый ЗаписьXML;
	//Запись.ОткрытьФайл(Путь + Имя);
	//Запись.ЗаписатьОбъявлениеXML();
	//НовыйXDTO.ЗаписатьXML(Запись, Объект.Файлы, НазначениеТипаXML.Явное, ФормаXML.Элемент);
	//Запись.Закрыть();
	//
	//Имя		= Файл.Имя + "_Portrait_FormDataTree_" + Формат(ТекущаяДата, "ДФ=yyyy-MM-dd_HH-mm-ss") + ".xml";
	//Запись = Новый ЗаписьXML;
	//Запись.ОткрытьФайл(Путь + Имя);
	//Запись.ЗаписатьОбъявлениеXML();
	//НовыйXDTO.ЗаписатьXML(Запись, Объект.Каталоги, НазначениеТипаXML.Явное, ФормаXML.Элемент);
	//
	//
	//СтруктураСохранения	= Новый Структура;
	//СтруктураСохранения.Вставить("ТекущаяДата", ТекущаяДата());	
	//#Если НЕ ТонкийКлиент Тогда
	//СтруктураСохранения.Вставить("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());	
	//#КонецЕсли
	//СтруктураСохранения.Вставить("Путь", Объект.Путь);	
	//СтруктураСохранения.Вставить("Каталоги", Объект.Каталоги);	
	//СтруктураСохранения.Вставить("Файлы", Объект.Файлы);	
	//
	//Имя		= Файл.Имя + "_Portrait_" + Формат(ТекущаяДата, "ДФ=yyyy-MM-dd_HH-mm-ss") + ".xml";
	//Запись = Новый ЗаписьXML;
	//Запись.ОткрытьФайл(Путь + Имя);
	//Запись.ЗаписатьОбъявлениеXML();
	//НовыйXDTO.ЗаписатьXML(Запись, СтруктураСохранения, НазначениеТипаXML.Явное, ФормаXML.Элемент);
	
	//ЗапуститьПриложение(Путь + Имя);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПортретНаСервере()
	
    НовыйXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	ТекущаяДата					= Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd_HH-mm-ss") ;
	ТекущаяУниверсальнаяДата	= Формат(ТекущаяУниверсальнаяДата(), "ДФ=yyyy-MM-dd_HH-mm-ss") ;
	Файл	= Новый Файл(Объект.Путь);
	
	Путь = Файл.Путь;
	
	Имя		= Файл.Имя + "_MyActions_ValueTable_" + ТекущаяДата + ".xml";
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(Путь + Имя);
	Запись.ЗаписатьОбъявлениеXML();
	НовыйXDTO.ЗаписатьXML(Запись, Объект.Файлы.Выгрузить(), НазначениеТипаXML.Явное, ФормаXML.Элемент);
	
	
	
	//Имя		= Файл.Имя + "_Portrait_FormDataCollection_" + Формат(ТекущаяДата, "ДФ=yyyy-MM-dd_HH-mm-ss") + ".xml";
	//Запись = Новый ЗаписьXML;
	//Запись.ОткрытьФайл(Путь + Имя);
	//Запись.ЗаписатьОбъявлениеXML();
	//НовыйXDTO.ЗаписатьXML(Запись, Объект.Файлы, НазначениеТипаXML.Явное, ФормаXML.Элемент);
	//Запись.Закрыть();
	//
	//Имя		= Файл.Имя + "_Portrait_FormDataTree_" + Формат(ТекущаяДата, "ДФ=yyyy-MM-dd_HH-mm-ss") + ".xml";
	//Запись = Новый ЗаписьXML;
	//Запись.ОткрытьФайл(Путь + Имя);
	//Запись.ЗаписатьОбъявлениеXML();
	//НовыйXDTO.ЗаписатьXML(Запись, Объект.Каталоги, НазначениеТипаXML.Явное, ФормаXML.Элемент);
	//
	
	//СтруктураСохранения	= Новый Структура;
	//СтруктураСохранения.Вставить("ТекущаяДата", ТекущаяДата());	
	//#Если НЕ ТонкийКлиент Тогда
	//СтруктураСохранения.Вставить("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());	
	//#КонецЕсли
	//СтруктураСохранения.Вставить("Путь", Объект.Путь);	
	//СтруктураСохранения.Вставить("Каталоги", Объект.Каталоги);	
	//СтруктураСохранения.Вставить("Файлы", Объект.Файлы);	
	//СтруктураСохранения.Вставить("ФайлыВыгрузить", Объект.Файлы.Выгрузить());	
	//Попытка
	//	СтруктураСохранения.Вставить("КаталогиРеквизитФормыВЗначение", РеквизитФормыВЗначение(Объект.Каталоги, Тип("ДеревоЗначений")));	
	//Исключение
	//	Сообщить("КаталогиРеквизитФормыВЗначение "  + ОписаниеОшибки());
	//КонецПопытки;
	//
	
	//Имя		= Файл.Имя + "_Portrait_" + Формат(ТекущаяДата, "ДФ=yyyy-MM-dd_HH-mm-ss") + ".xml";
	//Запись = Новый ЗаписьXML;
	//Запись.ОткрытьФайл(Путь + Имя);
	//Запись.ЗаписатьОбъявлениеXML();
	//НовыйXDTO.ЗаписатьXML(Запись, СтруктураСохранения, НазначениеТипаXML.Явное, ФормаXML.Элемент);
	//
	//ЗапуститьПриложение(Путь + Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПортрет()
	
	Файл	= Новый Файл(Объект.Путь);
	ВыбратьФайл(Файл.Путь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл(Каталог = Неопределено)
	
	Если Каталог	= Неопределено
		Тогда Каталог	= КаталогДокументов();
	КонецЕсли;
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Расширение	= ".xml";
	
	Файл	= Новый Файл(Объект.Путь);
	ВыборФайла.Каталог = Каталог;
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла-портрета Каталога с файлами'");
	ВыборФайла.Показать(Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтаФорма, Новый Структура("ВыборФайла", ВыборФайла)));
	ВыборФайла.Фильтр	= "*_MyActions_ValueTable_*.xml";	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершение(ВыбранныеФайлы1, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
	
	Если (ВыбранныеФайлы1 <> Неопределено) Тогда
		//ВыбранныеФайлы = ВыборФайла.ВыбранныеФайлы;
		
		ВыбратьФайлЗавершениеНаСервере(ВыборФайла.ПолноеИмяФайла);
		Возврат;
		ПолноеИмяФайла	= ВыборФайла.ПолноеИмяФайла;
		Чтение = Новый ЧтениеXML;
		НовыйXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
		Чтение.ОткрытьФайл(ПолноеИмяФайла);
		СохраненныеСвойства = НовыйXDTO.ПрочитатьXML(Чтение);
		Чтение.Закрыть();
		
		Для Каждого Свойство ИЗ  СохраненныеСвойства Цикл
			Если Объект.Свойство(Свойство.Ключ) Тогда
				Если ТипЗнч(Свойство.Значение) = Тип("ДанныеФормыДерево") 
					ИЛИ ТипЗнч(Свойство.Значение) = Тип("ДанныеФормыКоллекция")  Тогда
					Попытка
						Транзит	= 	Свойство.Значение;
						НовыйXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
					    Строка	= НовыйXDTO.XMLСтрока(Свойство.Значение);
						ЗагрузитьНаСервере(Свойство.Ключ, ТипЗнч(Свойство.Значение), Строка);
						
					Исключение
						Сообщить(Свойство.Ключ + ".Загрузить(): " + ОписаниеОшибки());
					КонецПопытки;
				Иначе
					Попытка
						Объект[Свойство.Ключ]	= Свойство.Значение;
					Исключение
						Сообщить(Свойство.Ключ + ": " + ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыбратьФайлЗавершениеНаСервере(ПолноеИмяФайла) Экспорт
	
	Чтение = Новый ЧтениеXML;
	НовыйXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	Чтение.ОткрытьФайл(ПолноеИмяФайла);
	Значение = НовыйXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	Объект.Файлы.Загрузить(Значение);
	
	Возврат;
	
	Чтение = Новый ЧтениеXML;
	НовыйXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	Чтение.ОткрытьФайл(ПолноеИмяФайла);
	СохраненныеСвойства = НовыйXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	
	
	Для Каждого Свойство ИЗ  СохраненныеСвойства Цикл
		Если Объект.Свойство(Свойство.Ключ) Тогда
			Если ТипЗнч(Свойство.Значение) = Тип("ДанныеФормыДерево") 
				ИЛИ ТипЗнч(Свойство.Значение) = Тип("ДанныеФормыКоллекция")  Тогда
				Попытка
					Объект[Свойство.Ключ]	= Свойство.Значение;
					//НовыйXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
					//Строка	= НовыйXDTO.XMLСтрока(Свойство.Значение);
					//ЗагрузитьНаСервере(Свойство.Ключ, ТипЗнч(Свойство.Значение), Строка);
					
				Исключение
					Сообщить(Свойство.Ключ + " = Свойство.Значение" + ОписаниеОшибки());
				КонецПопытки;
				Попытка
					Значение	= РеквизитФормыВЗначение(Свойство.Значение);
					ЗначениеВРеквизитФормы(Значение, Свойство.Ключ);
				Исключение
					Сообщить(Свойство.Ключ + ".РеквизитФормыВЗначение(): " + ОписаниеОшибки());
				КонецПопытки;

			Иначе
				Попытка
					Объект[Свойство.Ключ]	= Свойство.Значение;
				Исключение
					Сообщить(Свойство.Ключ + ": " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ЗагрузитьНаСервере(Реквизит, Тип, Строка)
	Попытка
		НовыйXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
		СохраненныеСвойства = НовыйXDTO.XMLЗначение(Тип, Строка);
		Объект[Реквизит]	= ЗначениеВРеквизитФормы(Объект.Транзит, Реквизит);
	Исключение
		Сообщить(Реквизит + ", ошибка на сервере: " + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

	

	




